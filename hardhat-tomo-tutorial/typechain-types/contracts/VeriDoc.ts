/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface VeriDocInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "documents"
      | "getDocumentDetails"
      | "grantAccess"
      | "grantedAccess"
      | "hasAccess"
      | "notarizeDocument"
      | "revokeAccess"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AccessGranted"
      | "AccessRevoked"
      | "DocumentNotarized"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "documents",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDocumentDetails",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantAccess",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantedAccess",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasAccess",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "notarizeDocument",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeAccess",
    values: [BytesLike, AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "documents", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDocumentDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantedAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasAccess", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "notarizeDocument",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeAccess",
    data: BytesLike
  ): Result;
}

export namespace AccessGrantedEvent {
  export type InputTuple = [
    documentHash: BytesLike,
    owner: AddressLike,
    grantee: AddressLike
  ];
  export type OutputTuple = [
    documentHash: string,
    owner: string,
    grantee: string
  ];
  export interface OutputObject {
    documentHash: string;
    owner: string;
    grantee: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AccessRevokedEvent {
  export type InputTuple = [
    documentHash: BytesLike,
    owner: AddressLike,
    grantee: AddressLike
  ];
  export type OutputTuple = [
    documentHash: string,
    owner: string,
    grantee: string
  ];
  export interface OutputObject {
    documentHash: string;
    owner: string;
    grantee: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DocumentNotarizedEvent {
  export type InputTuple = [
    documentHash: BytesLike,
    owner: AddressLike,
    timestamp: BigNumberish,
    title: string
  ];
  export type OutputTuple = [
    documentHash: string,
    owner: string,
    timestamp: bigint,
    title: string
  ];
  export interface OutputObject {
    documentHash: string;
    owner: string;
    timestamp: bigint;
    title: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface VeriDoc extends BaseContract {
  connect(runner?: ContractRunner | null): VeriDoc;
  waitForDeployment(): Promise<this>;

  interface: VeriDocInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  documents: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, bigint, string, boolean] & {
        owner: string;
        timestamp: bigint;
        title: string;
        exists: boolean;
      }
    ],
    "view"
  >;

  getDocumentDetails: TypedContractMethod<
    [_documentHash: BytesLike],
    [
      [string, bigint, string] & {
        owner: string;
        timestamp: bigint;
        title: string;
      }
    ],
    "view"
  >;

  grantAccess: TypedContractMethod<
    [_documentHash: BytesLike, _grantee: AddressLike],
    [void],
    "nonpayable"
  >;

  grantedAccess: TypedContractMethod<
    [arg0: BytesLike, arg1: AddressLike],
    [boolean],
    "view"
  >;

  hasAccess: TypedContractMethod<
    [_documentHash: BytesLike, _user: AddressLike],
    [boolean],
    "view"
  >;

  notarizeDocument: TypedContractMethod<
    [_documentHash: BytesLike, _title: string],
    [void],
    "nonpayable"
  >;

  revokeAccess: TypedContractMethod<
    [_documentHash: BytesLike, _grantee: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "documents"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, bigint, string, boolean] & {
        owner: string;
        timestamp: bigint;
        title: string;
        exists: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDocumentDetails"
  ): TypedContractMethod<
    [_documentHash: BytesLike],
    [
      [string, bigint, string] & {
        owner: string;
        timestamp: bigint;
        title: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "grantAccess"
  ): TypedContractMethod<
    [_documentHash: BytesLike, _grantee: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "grantedAccess"
  ): TypedContractMethod<
    [arg0: BytesLike, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasAccess"
  ): TypedContractMethod<
    [_documentHash: BytesLike, _user: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "notarizeDocument"
  ): TypedContractMethod<
    [_documentHash: BytesLike, _title: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeAccess"
  ): TypedContractMethod<
    [_documentHash: BytesLike, _grantee: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AccessGranted"
  ): TypedContractEvent<
    AccessGrantedEvent.InputTuple,
    AccessGrantedEvent.OutputTuple,
    AccessGrantedEvent.OutputObject
  >;
  getEvent(
    key: "AccessRevoked"
  ): TypedContractEvent<
    AccessRevokedEvent.InputTuple,
    AccessRevokedEvent.OutputTuple,
    AccessRevokedEvent.OutputObject
  >;
  getEvent(
    key: "DocumentNotarized"
  ): TypedContractEvent<
    DocumentNotarizedEvent.InputTuple,
    DocumentNotarizedEvent.OutputTuple,
    DocumentNotarizedEvent.OutputObject
  >;

  filters: {
    "AccessGranted(bytes32,address,address)": TypedContractEvent<
      AccessGrantedEvent.InputTuple,
      AccessGrantedEvent.OutputTuple,
      AccessGrantedEvent.OutputObject
    >;
    AccessGranted: TypedContractEvent<
      AccessGrantedEvent.InputTuple,
      AccessGrantedEvent.OutputTuple,
      AccessGrantedEvent.OutputObject
    >;

    "AccessRevoked(bytes32,address,address)": TypedContractEvent<
      AccessRevokedEvent.InputTuple,
      AccessRevokedEvent.OutputTuple,
      AccessRevokedEvent.OutputObject
    >;
    AccessRevoked: TypedContractEvent<
      AccessRevokedEvent.InputTuple,
      AccessRevokedEvent.OutputTuple,
      AccessRevokedEvent.OutputObject
    >;

    "DocumentNotarized(bytes32,address,uint256,string)": TypedContractEvent<
      DocumentNotarizedEvent.InputTuple,
      DocumentNotarizedEvent.OutputTuple,
      DocumentNotarizedEvent.OutputObject
    >;
    DocumentNotarized: TypedContractEvent<
      DocumentNotarizedEvent.InputTuple,
      DocumentNotarizedEvent.OutputTuple,
      DocumentNotarizedEvent.OutputObject
    >;
  };
}
